generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String @id @default(cuid())
  address String
  tasks   Task[]

  @@unique([address])
}

model Task {
  id          String       @id @default(cuid())
  title       String
  options     Option[]
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  submissions Submission[]
  signature   String
  amount      Int          @default(0)
  completed   Boolean      @default(false)
  // results TaskResult[]  TODO: DO THIS IN THE CLEANEST FASHION
}

model Option {
  id         Int         @id @default(autoincrement())
  position   Int
  img_url    String
  taskId     String
  task       Task        @relation(fields: [taskId], references: [id])
  submission Submission?
}

model Submission {
  id        String @id @default(cuid())
  workerId  String
  option_id Int    @unique
  taskId    String
  task      Task   @relation(fields: [taskId], references: [id])
  worker    Worker @relation(fields: [workerId], references: [id])
  option    Option @relation(fields: [option_id], references: [id])
  amount    Int?

  @@unique([taskId, workerId])
}

model Worker {
  id          String       @id @default(cuid())
  address     String
  submissions Submission[]
  balance     Balance?

  @@unique([address])
}

model Balance {
  id               String @id @default(cuid())
  workerId         String @unique
  worker           Worker @relation(fields: [workerId], references: [id])
  available_amount Int
  locked_amount    Int
}

// TODO : Design the TaskResult in a Better fashion

// model TaskResult{
//   id        String @id @default(cuid())
//   taskId    String 
//   task      Task @relation(fields: [taskId], references: [id])
//   option_1  Int
//   option_2  Int
//   option_3  Int
//   option_4  Int
// }
